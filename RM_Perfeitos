// Implemente um programa que possuía uma função "remove_perfeitos". Essa função deve receber por parâmetro uma
// lista ligada e remove todos os números perfeitos que estão dentro da lista. Na sua função principal leia do
// usuário N números e utilizando a função criada removendo os números perfeitos da lista de N números.


# include  < stdio.h >
# include  < stdlib.h >



typedef  struct registro
{
    valor int ;
    struct registro * prox;
}registro;

typedef  struct lista
{
    int qtd;
    struct registro * inicio;
}lista;

void  mostrar ( lista * l);
lista * aloca_lista ();
registro * aloca_registro ();
void  incluir_no_inicio (lista *l, int x);
void  mostrar ( lista * l);
int  perfeito ( int x);
void  remove_perfeitos (lista *l);



int  principal ()
{
    lista * l ;
    l = aloca_lista ();
    int n,i,número;

    printf ( " \n Quantos elementos deseja inserir? " );
    scanf ( " %d " ,&n);

    para (i= 0 ;i<n;i++)
    {
        printf ( " \n Digite um numero: " );
        scanf ( " %d " ,&numero);
        incluir_no_inicio (l,número);
    }

    remove_perfeitos (l);

    printf ( " \n Mostrando lista sem numeros perfeitos: " );

    mostrar (l);
    
   
    printf ( " \n " );
    retorna  0 ;
}

lista * aloca_lista ()
{
    lista * novo;
    novo = (lista*) calloc ( 1 , sizeof (lista));
    retornar novo;
}

registro * aloca_registro ()
{
    registro * novo;
    novo = (registro*) calloc ( 1 , sizeof (registro));
    retornar novo;
}

void  incluir_no_inicio (lista *l, int x)
{
    registro * novo;
    novo = aloca_registro ();
    novo-> valor = x;

    if (l-> inicio == NULL )
    {
        l-> inicio = novo;
    }
    outro
    {
        novo-> prox = l-> inicio ;
        l-> inicio = novo;
    }
    l-> qtd ++;

}

void  mostrar (lista * l)
{
    if (l-> inicio == NULL )
    {
        printf ( " \ nLista vazia " );
    }
    outro
    {
        registro *aux;
        aux = l-> inicio ;
        enquanto (aux!= NULL )
        {
            printf ( " \n  %d " ,aux-> valor );
            aux = aux-> prox ;
        }
    }
}

void  remove_perfeitos (lista *l)
{
    if (l-> inicio == NULL )
    {
        printf ( " \ nLista vazia " );
        retorno ;
    }
    outro
    {
        registro *aux= NULL ,*ant= NULL ,*removido= NULL ;
        int p;

        aux = l-> inicio ;

        enquanto (aux!= NULL )
        {
            if ( perfeito (aux-> valor ))
            {
                p = aux-> valor ;

                if (ant== NULL )
                {
                    l-> inicio = aux-> prox ;
                }
                outro
                {
                    ant-> prox = aux-> prox ;
                }
                removido = auxiliar;
                aux=aux-> prox ;
                livre (removido);
                l-> qtd --;
            }
            outro
            {
                formiga = auxiliar;
                aux=aux-> prox ;
            }
        }
    }
}

int  perfeito ( int x)
{
    int som= 0 , i;

    para (i= 1 ;i<x;i++)
    {
        se (x%i== 0 )
        {
            som = som + i;
        }
    }

    se (som == x)
        retornar  1 ;
    outro
        retorna  0 ;

}
